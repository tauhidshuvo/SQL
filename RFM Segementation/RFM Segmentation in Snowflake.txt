--RFM Segementation: Recency, Frequency, and Monetary information based Segmentation of Customers

--Creating the Database
CREATE OR REPLACE DATABASE RFM_SALES;
USE DATABASE RFM_SALES;


CREATE OR REPLACE TABLE SALES_SAMPLE_DATA (
    ORDERNUMBER NUMBER (8, 0),
    QUANTITYORDERED NUMBER (8,2),
    PRICEEACH NUMBER (8,2),
    ORDERLINENUMBER NUMBER (3, 0),
    SALES NUMBER (8,2),
    ORDERDATE VARCHAR (16),
    STATUS VARCHAR (16),
    QTR_ID NUMBER (1,0),
    MONTH_ID NUMBER (2,0),
    YEAR_ID NUMBER (4,0),
    PRODUCTLINE VARCHAR (32),
    MSRP NUMBER (8,0),
    PRODUCTCODE VARCHAR (16),
    CUSTOMERNAME VARCHAR (64),
    PHONE VARCHAR (32),
    ADDRESSLINE1 VARCHAR (64),
    ADDRESSLINE2 VARCHAR (64),
    CITY VARCHAR (16),
    STATE VARCHAR (16),
    POSTALCODE VARCHAR (16),
    COUNTRY VARCHAR (24),
    TERRITORY VARCHAR (24),
    CONTACTLASTNAME VARCHAR (16),
    CONTACTFIRSTNAME VARCHAR (16),
    DEALSIZE VARCHAR (10) 
);

--Inspecting Data
SELECT * FROM SALES_SAMPLE_DATA LIMIT 10;
SELECT COUNT(*) FROM SALES_SAMPLE_DATA;--2823

--Checking unique values
select distinct status from SALES_SAMPLE_DATA;
select distinct year_id from SALES_SAMPLE_DATA;
select distinct PRODUCTLINE from SALES_SAMPLE_DATA;
select distinct COUNTRY from SALES_SAMPLE_DATA;
select distinct DEALSIZE from SALES_SAMPLE_DATA;
select distinct TERRITORY from SALES_SAMPLE_DATA;

select distinct MONTH_ID from SALES_SAMPLE_DATA
where year_id = 2005
ORDER BY 1;

select year_id, sum(sales) as revenue
    from SALES_SAMPLE_DATA
group by 1
ORDER BY 1;


---ANALYSIS
----Let's start by grouping sales by productline
SELECT ORDERNUMBER, ORDERLINENUMBER, PRODUCTLINE, SALES, *  
FROM SALES_SAMPLE_DATA
ORDER BY 1, 2
LIMIT 100;

select PRODUCTLINE, ROUND(sum(sales),0) AS Revenue, COUNT(DISTINCT ORDERNUMBER) AS NO_OF_ORDERS
from SALES_SAMPLE_DATA
group by PRODUCTLINE
order by 3 desc;


select YEAR_ID, sum(sales) Revenue
from SALES_SAMPLE_DATA
group by YEAR_ID
order by 2 desc;

select  DEALSIZE,  sum(sales) Revenue
from SALES_SAMPLE_DATA
group by DEALSIZE
order by 2 desc;


----What was the best month for sales in a specific year? How much was earned that month? 
select  MONTH_ID, sum(sales) Revenue, count(ORDERNUMBER) Frequency
from SALES_SAMPLE_DATA
where YEAR_ID = 2004 --change year to see the rest
group by  MONTH_ID
order by 2 desc;

--November seems to be the month, what product did they sell in November, Classic I believe
select  PRODUCTLINE, sum(sales) Revenue, count(ORDERNUMBER) Frequency
from SALES_SAMPLE_DATA
where YEAR_ID = 2004 and MONTH_ID = 11 --change year to see the rest
group by  MONTH_ID, PRODUCTLINE
order by Revenue desc;


-- Who is our best customer (this could be best answered with RFM)

--SELECT TO_CHAR(TO_DATE(ORDERDATE, 'DD/MM/YY'), 'YYYY-MM-DD') AS converted_date from SALES_SAMPLE_DATA;

SELECT ORDERDATE FROM SALES_SAMPLE_DATA LIMIT 5;
SELECT TO_DATE(ORDERDATE, 'DD/MM/YY') as Date  from SALES_SAMPLE_DATA LIMIT 5;

SELECT MAX(TO_DATE(ORDERDATE, 'DD/MM/YY')) AS LATESTDATE from SALES_SAMPLE_DATA; --2005-05-31: Last Transaction Date
SELECT MIN(TO_DATE(ORDERDATE, 'DD/MM/YY')) AS EARLIESTDATE from SALES_SAMPLE_DATA;--2003-01-06

SELECT 
    DATEDIFF('DAY', MIN(TO_DATE(ORDERDATE, 'DD/MM/YY')), MAX(TO_DATE(ORDERDATE, 'DD/MM/YY'))) AS RANGE
FROM SALES_SAMPLE_DATA; --Range of Transaction is 876 Days


--RFM SEGMENTATION: SEGMENTING YOUR CUSTOMER BASEN ON RECENCY (R), FREQUENCY (F), AND MONETARY (M) SCORES

CREATE VIEW RFM_SEGMENT AS
WITH RFM_INITIAL_CAL AS
(SELECT
    CUSTOMERNAME,
    ROUND(SUM(SALES),0) AS MonetaryValue,
    COUNT(DISTINCT ORDERNUMBER) AS Frequency,
    --MAX(TO_DATE(ORDERDATE, 'DD/MM/YY')) AS EACH_CUSTOMERS_LAST_TRANSACTION_DATE,
    --(SELECT MAX(TO_DATE(ORDERDATE, 'DD/MM/YY')) FROM SALES_SAMPLE_DATA) AS BUSINESS_LAST_TRANSACTION_DATE,
    DATEDIFF('DAY', MAX(TO_DATE(ORDERDATE, 'DD/MM/YY')), (SELECT MAX(TO_DATE(ORDERDATE, 'DD/MM/YY')) FROM SALES_SAMPLE_DATA)) AS Recency
FROM SALES_SAMPLE_DATA
GROUP BY CUSTOMERNAME),

RFM_SCORE_CALC AS
(SELECT 
    C.*,
    NTILE(4) OVER (ORDER BY C.RECENCY DESC) RFM_RECENCY_SCORE,
    NTILE(4) OVER (ORDER BY C.FREQUENCY ASC) RFM_FREQUENCY_SCORE,
    NTILE(4) OVER (ORDER BY C.MonetaryValue ASC) RFM_MONETARY_SCORE
FROM RFM_INITIAL_CAL AS C)

SELECT
    R.CUSTOMERNAME,
    (R.RFM_RECENCY_SCORE+ R.RFM_FREQUENCY_SCORE+ R.RFM_MONETARY_SCORE) AS TOTAL_RFM_SCORE,
    CONCAT(CAST(R.RFM_RECENCY_SCORE AS VARCHAR), CAST(R.RFM_FREQUENCY_SCORE AS VARCHAR), CAST(R.RFM_MONETARY_SCORE AS VARCHAR)) AS RFM_CATEGORY_COMBINATION
FROM RFM_SCORE_CALC AS R;



SELECT * FROM RFM_SEGMENT;

SELECT DISTINCT RFM_CATEGORY_COMBINATION 
    FROM RFM_SEGMENT
ORDER BY 1;



SELECT 
    CUSTOMERNAME,
    CASE
        WHEN RFM_CATEGORY_COMBINATION IN (111, 112, 121, 123, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_CATEGORY_COMBINATION IN (133, 134, 143, 244, 334, 343, 344, 144) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_CATEGORY_COMBINATION IN (311, 411, 331) THEN 'NEW CUSTOMERS'
        WHEN RFM_CATEGORY_COMBINATION IN (222, 231, 221,  223, 233, 322) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_CATEGORY_COMBINATION IN (323, 333,321, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_CATEGORY_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'CANNOT BE DEFINED'
    END AS CUSTOMER_SEGMENT

FROM RFM_SEGMENT;

/*
WITH CTE1 AS
(SELECT 
    CUSTOMERNAME,
    CASE
        WHEN RFM_CATEGORY_COMBINATION IN (111, 112, 121, 123, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_CATEGORY_COMBINATION IN (133, 134, 143, 244, 334, 343, 344, 144) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_CATEGORY_COMBINATION IN (311, 411, 331) THEN 'NEW CUSTOMERS'
        WHEN RFM_CATEGORY_COMBINATION IN (222, 231, 221,  223, 233, 322) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_CATEGORY_COMBINATION IN (323, 333,321, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_CATEGORY_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'CANNOT BE DEFINED'
    END AS CUSTOMER_SEGMENT
FROM RFM_SEGMENT)

SELECT 
    CUSTOMER_SEGMENT, count(*) as Number_of_Customers
FROM CTE1
GROUP BY 1
ORDER BY 2 DESC;


*/




